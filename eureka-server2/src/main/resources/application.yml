server:
  port: 8762

eureka:
  instance:
    hostname: localhost
  client:
#    # 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。
#    # 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server
#    registerWithEureka: false # 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false
#    fetchRegistry: false # 是否在本地缓存注册表信息，默认为true，当前为单点eureka server，不需要从其他eureka除获取注册表信息，更谈不上缓存，故配置为false
    #是否要注册到其他Server上
    registerWithEureka: true
    #是否拉取其他节点的服务信息
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:8761/eureka/
  server:
    # eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上
    # 默认30秒，eclipse提示默认0应该是错误的，源代码中responseCacheUpdateIntervalMs = 30 * 1000。
    response-cache-update-interval-ms: 3000 # 网上很多专家的博客错误写成responseCacheUpdateInvervalMs，请注意。这里配置为3秒。
    # eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，
    # 过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。
    # 由于启用了evict其实就用不太上改这个配置了，默认180s
    responseCacheAutoExpirationInSeconds: 180
    # 启用主动失效，并且每次主动失效检测间隔为3s。源码evictionIntervalTimerInMs = 60 * 1000，默认一分钟。
    # 需要注意的是该配置会打印INFO日志，增加info日志量，修改后从每60秒打印一次变成3秒打印一次。
    evictionIntervalTimerInMs: 3000 # 注意不要写成EvictionIntervalTimerInMs，yml大小写敏感。
